<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Android 开发环境</title>
    <url>/2022/10/01/android-env-config.html</url>
    <content><![CDATA[<h3 id="记录安装开发环境的配置"><a href="#记录安装开发环境的配置" class="headerlink" title="记录安装开发环境的配置"></a>记录安装开发环境的配置</h3><p>其实如果一个项目被Android Studio打开.是不需要配置任何环境变量都能被正确编译的</p>
<p>但是我们需要的不仅仅是这样</p>
<p>下载SDK与开发工具的位置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">D:\Android\Android Studio</span><br><span class="line">D:\Android\SDK</span><br><span class="line">D:\Android\Home</span><br><span class="line">D:\Android\Flutter</span><br><span class="line">D:\Android\Gradle</span><br></pre></td></tr></table></figure>

<h3 id="Java环境配置"><a href="#Java环境配置" class="headerlink" title="Java环境配置"></a>Java环境配置</h3><p>这个时候我们可以使用Android Studio自带的JDK与JRE</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">JAVA_HOME</span>=<span class="string">D:\Android\Android Studio\jre</span></span><br><span class="line"><span class="attr">JRE_HOME</span>=<span class="string">D:\Android\Android Studio\jre\jre</span></span><br><span class="line"><span class="attr">CLASSPATH</span>=<span class="string">.;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar</span></span><br></pre></td></tr></table></figure>

<h3 id="Android环境配置"><a href="#Android环境配置" class="headerlink" title="Android环境配置"></a>Android环境配置</h3><p>配置好Android SDK的位置.</p>
<blockquote>
<p>配置GRADLE_USER_HOME的原因是因为我想控制gradle的缓存位置</p>
</blockquote>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">Android_SDK_HOME</span>=<span class="string">D:\Android\Home</span></span><br><span class="line"><span class="attr">ANDROID_HOME</span>=<span class="string">D:\Android\SDK</span></span><br><span class="line"><span class="attr">ANDROID_SDK_ROOT</span>=<span class="string">%ANDROID_HOME%</span></span><br><span class="line"><span class="attr">GRADLE_USER_HOME</span>=<span class="string">D:\Android\Gradle</span></span><br></pre></td></tr></table></figure>

<h3 id="Flutter环境变量"><a href="#Flutter环境变量" class="headerlink" title="Flutter环境变量"></a>Flutter环境变量</h3><p>若顺便进行Flutter</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">FLUTTER_HOME</span>=<span class="string">D:\Android\Flutter</span></span><br><span class="line"><span class="attr">FLUTTER_STORAGE_BASE_URL</span>=<span class="string">https://storage.flutter-io.cn</span></span><br><span class="line"><span class="attr">PUB_HOSTED_URL</span>=<span class="string">https://pub.flutter-io.cn</span></span><br></pre></td></tr></table></figure>


<h3 id="PATH"><a href="#PATH" class="headerlink" title="PATH"></a>PATH</h3><p>加入到PATH,方便命令行可以调用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%JAVA_HOME%\bin</span><br><span class="line">%JRE_HOME%\bin</span><br><span class="line">%ANDROID_HOME%\platform-tools</span><br><span class="line">%FLUTTER_HOME%\bin</span><br></pre></td></tr></table></figure>

<h3 id="Gradle-下载代理"><a href="#Gradle-下载代理" class="headerlink" title="Gradle 下载代理"></a>Gradle 下载代理</h3><blockquote>
<p>D:\Android\Gradle\gradle.properties</p>
</blockquote>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">systemProp.http.proxyHost</span>=<span class="string">127.0.0.1</span></span><br><span class="line"><span class="attr">systemProp.http.proxyPort</span>=<span class="string">1080</span></span><br><span class="line"><span class="attr">systemProp.https.proxyHost</span>=<span class="string">127.0.0.1</span></span><br><span class="line"><span class="attr">systemProp.https.proxyPort</span>=<span class="string">1080</span></span><br></pre></td></tr></table></figure>

<h3 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h3><p>经过以上配置.任意一个Android项目下载到本地,不需要Android Studio打开.</p>
<p>可以直接通过gradlew assembelDebug直接进行编译.在只想运行一下别人项目的时候十分便捷.</p>
]]></content>
      <categories>
        <category>默认</category>
      </categories>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 命令记录</title>
    <url>/2022/10/08/notes-221008-linux-command.html</url>
    <content><![CDATA[<h3 id="全盘查找文件"><a href="#全盘查找文件" class="headerlink" title="全盘查找文件"></a>全盘查找文件</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">find / -name &quot;*.log&quot;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>服务器Docker容器配置</title>
    <url>/2022/10/08/notes-221008-server-config.html</url>
    <content><![CDATA[<h3 id="Docker-接口创建与卷创建"><a href="#Docker-接口创建与卷创建" class="headerlink" title="Docker 接口创建与卷创建"></a>Docker 接口创建与卷创建</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker network create --driver bridge private</span><br><span class="line">docker volume create portainer</span><br><span class="line">docker volume create redis</span><br></pre></td></tr></table></figure>

<h3 id="Docker-容器创建"><a href="#Docker-容器创建" class="headerlink" title="Docker 容器创建"></a>Docker 容器创建</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d --restart=always --network private --name watchtower -v /var/run/docker.sock:/var/run/docker.sock containrrr/watchtower --cleanup</span><br><span class="line">docker run -d --restart=always --network private --name xray -p 443:443 -v /root/xray:/etc/xray teddysun/xray</span><br><span class="line">docker run -d --restart=always --network private --name portainer -v /var/run/docker.sock:/var/run/docker.sock -v portainer:/data portainer/portainer-ce</span><br><span class="line">docker run -d --restart=always --network private --name freenom -v /root/freenom:/conf -v /root/freenom/logs:/app/logs luolongfei/freenom</span><br><span class="line">docker run -d --restart=always --network private --name nginx -v /root/nginx:/usr/share/nginx nginx</span><br><span class="line">docker run -d --restart=always --network private --name frps -p 8088:8088 -p 8088:8088/udp -v /root/frp/frps.ini:/etc/frp/frps.ini snowdreamtech/frps</span><br><span class="line">docker run -d --restart=always --network private --name docker.2048 alexwhen/docker-2048</span><br><span class="line">docker run -d --restart=always --network private --name hysteria -p 443:443/udp -v /root/hysteria:/etc/hysteria teddysun/hysteria</span><br><span class="line">docker run -d --restart=always --network private --name redis -v redis:/data redis</span><br><span class="line">docker run -d --restart=always --network private --name tomcat -v /root/tomcat/webapps:/usr/local/tomcat/webapps -v /root/tomcat/logs:/usr/local/tomcat/logs tomcat:9.0-jre11</span><br></pre></td></tr></table></figure>

<h3 id="Acme-sh-证书安装"><a href="#Acme-sh-证书安装" class="headerlink" title="Acme.sh 证书安装"></a>Acme.sh 证书安装</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">acme.sh --install-cert -d www.thisdk.tk --ecc --key-file /root/xray/tls/www.thisdk.tk.key --fullchain-file /root/xray/tls/www.thisdk.tk.cer --reloadcmd &quot;docker restart xray&quot;</span><br><span class="line">acme.sh --install-cert -d frp.thisdk.tk --ecc --key-file /root/xray/tls/frp.thisdk.tk.key --fullchain-file /root/xray/tls/frp.thisdk.tk.cer --reloadcmd &quot;docker restart xray&quot;</span><br><span class="line">acme.sh --install-cert -d 2048.thisdk.tk --ecc --key-file /root/xray/tls/2048.thisdk.tk.key --fullchain-file /root/xray/tls/2048.thisdk.tk.cer --reloadcmd &quot;docker restart xray&quot;</span><br><span class="line">acme.sh --install-cert -d docker.thisdk.tk --ecc --key-file /root/xray/tls/docker.thisdk.tk.key --fullchain-file /root/xray/tls/docker.thisdk.tk.cer --reloadcmd &quot;docker restart xray&quot;</span><br><span class="line">acme.sh --install-cert -d tomcat.thisdk.tk --ecc --key-file /root/xray/tls/tomcat.thisdk.tk.key --fullchain-file /root/xray/tls/tomcat.thisdk.tk.cer --reloadcmd &quot;docker restart xray&quot;</span><br></pre></td></tr></table></figure>

<h3 id="Acme-sh-证书申请"><a href="#Acme-sh-证书申请" class="headerlink" title="Acme.sh 证书申请"></a>Acme.sh 证书申请</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">acme.sh --issue -d www.thisdk.tk --keylength ec-256 --standalone</span><br><span class="line">acme.sh --issue -d frp.thisdk.tk --keylength ec-256 --standalone</span><br><span class="line">acme.sh --issue -d 2048.thisdk.tk --keylength ec-256 --standalone</span><br><span class="line">acme.sh --issue -d docker.thisdk.tk --keylength ec-256 --standalone</span><br><span class="line">acme.sh --issue -d tomcat.thisdk.tk --keylength ec-256 --standalone</span><br></pre></td></tr></table></figure>


<h3 id="Acme-sh-证书续期"><a href="#Acme-sh-证书续期" class="headerlink" title="Acme.sh 证书续期"></a>Acme.sh 证书续期</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">acme.sh --renew -d www.thisdk.tk --ecc --force</span><br><span class="line">acme.sh --renew -d frp.thisdk.tk --ecc --force</span><br><span class="line">acme.sh --renew -d 2048.thisdk.tk --ecc --force</span><br><span class="line">acme.sh --renew -d tomcat.thisdk.tk --ecc --force</span><br><span class="line">acme.sh --renew -d docker.thisdk.tk --ecc --force</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
</search>
